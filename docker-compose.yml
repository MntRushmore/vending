# Docker Compose configuration for Vending Stream Analytics
version: '3.8'

services:
  # Main application
  vending-stream:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: vending-stream-analytics
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - vending-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vending-stream.rule=Host(`analytics.yourdomain.com`)"
      - "traefik.http.routers.vending-stream.tls=true"
      - "traefik.http.routers.vending-stream.tls.certresolver=letsencrypt"
      - "traefik.http.services.vending-stream.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: vending-stream-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - vending-stream
    networks:
      - vending-network
    profiles:
      - nginx

  # WebSocket server (example - replace with your actual WebSocket service)
  websocket-server:
    image: your-websocket-image:latest
    container_name: vending-websocket
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - WS_PORT=8080
    networks:
      - vending-network
    profiles:
      - websocket

  # Redis for caching (optional for future features)
  redis:
    image: redis:alpine
    container_name: vending-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - vending-network
    profiles:
      - cache

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: vending-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - vending-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: vending-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - vending-network
    profiles:
      - monitoring

networks:
  vending-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local